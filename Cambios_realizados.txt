- Server.hpp añadido miembro en private printIRCChatBanner, para mostrar banner en el cliente
- Server.hpp añadido miembro en public getCurrentTime, para mostrar la fecha y hora
- Main.cpp cambiado banner, ahora se muestra en el server este banner (Cambiar el nombre de la funcion)
- Parseado Nick y Join en CommandHandler.cpp 
- Channel.hpp añadido operador del canal. El admin del canal es el primero que lo crea.
    - Cada canal contiene un std::set que almacena los operadores de dicho canal, con eso diferenciamos de otros canales
      puedes ser admin de un canal y usuario normal en otros ya que cada canal maneja sus propios operadores
    - Para ello se crea una contenedor std::set para añadir el socket del cliente
        - elementos unicos, si añades un elemento que ya existe dentro no lo añades
        - se colocan automaticamente de manera ordenada de forma ascendente
        - no se puede modificar el valor del elemento directamente, primero hay que eliminarlo y luego insertar version modificada
- En Server.cpp la funcion JoinChannel he añádido una linea(283) para añadir como admin al creador del canal
- He quitado los include de la clase Channel y añadido dichos include en Library
- En CommandHandler he añadido funciones para el resto de comandos y una funcion auxiliar
    comprueba si el que ejecuta dichos comandos de admin lo es o no (handleOperatorCommand)
    busca por canales, si no existe da error y si no comprueba si es operador del canal o no.
** Comprobar en Server(JoinChannel), CommandHandler(handleOperatorCommand) y Channel(funciones operator)
    porque añade a todos los clientes como Admin, tal vez los meta a todos en el mismo std::set siempre?
** Ojo con la funcion isOperator en Channel.cpp en el if lo tengo con un ( == ) debe ser ( != ), lo tengo ahora añadirUsuario
    para poder seguir parseando y ejecutar comandos como admin, en el momento que se cambie es cuando viene el problema
    de que aun siendo admin no te verifica. Posible que el contenedor set no este vacio y no guarde bien el numero de socket?
    creo que es esto lo que pasa. Es como si hubiera dos instancias distintas y el socket se guarda en std::set y no en el otro
    por eso se queda vacio o no se que mierda pasa, ajjaj.
** No funciona bien el comando KICK, cuando intenta echar a un usuario que no existe te lanza el mensaje de que no puedes echarte a ti mismo 
    Tal vez sea como accede a los contenedores de channels o usuarios o no se que mierda pasa, creo que van  por ahi los tiros.

Aclaraciones Agustín:
- Problema con el contenedor "operators" solucionado, solo bastaba con invertir el orden de estas lineas en la funcion JoinChannel:
        newChannel.addOperator(client.GetClientSocket());
        this->channels.push_back(newChannel);
- Problema con el comando KICK también solucionado, el error se debía a uno de los bucles que recorría los usuarios en el canal.
Para simplificar un poco este último punto y debido a que teníamos muchos bucles nidificados que liaban un poco todo, he creado un par de miembros en la clase del Servidor.
        Channel* GetThisChannel(std::string channelName);  --> Devuelve un puntero al canal con ese nombre o un puntero nulo.
        int GetSocketByNick(const std::string& nick) const; --> Devuelve el socket en base al nick o -1 si no existe. 
Usé estas funciones para evitar algunos bucles en varias de las funciones ya implementadas, como PRIVMSG, KICK, handleOperatorCommand y no recuerdo si alguna mas. Pero ha quedado más limpio y mas corto.
** Me he dado cuenta que tambien falta el comando USER si no me equivoco, el subject pone "You must be able to authenticate, set a nickname, a username, join a channel,
send and receive private messages using your reference client." 



NUEVAS NOTAS 10 / 07 :
- He añadido atributos y miembros a Channel para que sea posible colocarlo en Modo "Solo con invitacion" (booleano y contenedor con invitados)
- Lo mismo con Topic, tambien he agregado atributos y miembros para esto en la misma clase
- He debido añadir algunas modificaciones a la funcion "handleOperatorCommand" y cambiarle un poco la lógica para que sea compatible con INVITE y TOPIC:
    *Por un lado INVITE debe funcionar al revés que los demas comandos en cuanto al orden (INVITE <nick> <#channel> en vez de INVITE <#channel> <nick>). Uno de los paramteros que se pasaban a "handleOperatorCommand" 
    era un string de "channel", esto lo borré porque para INVITE por ejemplo ese argumento era el "nick" y no el "channel", entonces no entraba en la funcion. Directamente quite ese argumento de string channel de la funcion, 
    por que todos estos datos ya se le pasan en el ultimo argumento ->  const std::vector<std::string> &arg
    *Por otro lado TOPIC puede ejecutarse por cualquiera para ver el tema deun determinado canal, no hace falta que sea admin. Los admins si pueden bloquear ese topic para que no lo puedan cambiar gente que no sea administradora. (MODE +t -t)